{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PageTitle from \"@/components/template/PageTitle\";\nimport TableList from \"@/components/template/TableList\";\nimport { mapActions, mapState } from \"vuex\";\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: \"Produtos\",\n  components: {\n    TableList,\n    PageTitle\n  },\n  data: () => ({\n    pages: [{\n      name: \"Início\",\n      link: \"/\"\n    }],\n    campos: [{\n      text: \"ID\",\n      field: \"id\"\n    }, {\n      text: \"Titulo\",\n      field: \"title\"\n    }, {\n      text: \"Descrição\",\n      field: \"description\"\n    }, {\n      text: \"Marca\",\n      field: \"brand\"\n    }],\n    acoes: [\"edit\", \"delete\", \"options\"]\n  }),\n  mounted() {\n    this.fetchProducts().catch(err => {\n      this.Toast.fire(\"Ocorreu um erro ao listar os produtos.\", \"\", \"error\");\n      console.log(\"error\", err);\n    });\n  },\n  methods: {\n    ...mapActions([\"deleteProducts\", \"fetchProducts\"]),\n    editar(i) {\n      this.$router.push(`/produto/${i.id}`);\n    },\n    deletar(item) {\n      // Verifica se realmente deve deletar\n      this.$swal.fire({\n        title: \"Deletar Produto\",\n        text: `Deseja realmente deletar o produto ${item.title}?`,\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        confirmButtonText: \"Sim, pode deletar.\",\n        cancelButtonColor: \"#d33\",\n        cancelButtonText: \"Cancelar\"\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.deleteProducts(item);\n        }\n      });\n    },\n    options(i) {\n      console.log(i);\n      this.$router.push({\n        name: 'product_options',\n        params: {\n          id: i.id\n        }\n      });\n    }\n  },\n  computed: {\n    ...mapState({\n      products: state => state.products.listProducts\n    })\n  }\n};","map":{"version":3,"mappings":";AAoBA,OAAOA,SAAQ,MAAO,iCAAiC;AACvD,OAAOC,SAAQ,MAAO,iCAAiC;AACvD,SAASC,UAAU,EAAEC,QAAO,QAAS,MAAM;AAE3C,eAAe;EACb;EACAC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IAAEJ,SAAS;IAAED;EAAU,CAAC;EACpCM,IAAI,EAAE,OAAO;IACXC,KAAK,EAAE,CACL;MACEH,IAAI,EAAE,QAAQ;MACdI,IAAI,EAAE;IACR,CAAC,CACF;IACDC,MAAM,EAAE,CACN;MAAEC,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,EAC3B;MAAED,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC,EAClC;MAAED,IAAI,EAAE,WAAW;MAAEC,KAAK,EAAE;IAAc,CAAC,EAC3C;MAAED,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAC,CAClC;IACDC,KAAK,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS;EACrC,CAAC,CAAC;EACFC,OAAO,GAAG;IACR,IAAI,CAACC,aAAa,EAAE,CAACC,KAAK,CAAEC,GAAG,IAAK;MAClC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,wCAAwC,EAAE,EAAE,EAAE,OAAO,CAAC;MACtEC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEJ,GAAG,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC;EACDK,OAAO,EAAE;IACP,GAAGnB,UAAU,CAAC,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;IAElDoB,MAAM,CAACC,CAAC,EAAE;MACR,IAAI,CAACC,OAAO,CAACC,IAAI,CAAE,YAAWF,CAAC,CAACG,EAAG,EAAC,CAAC;IACvC,CAAC;IAEDC,OAAO,CAACC,IAAI,EAAE;MACZ;MACA,IAAI,CAACC,KAAI,CACNX,IAAI,CAAC;QACJY,KAAK,EAAE,iBAAiB;QACxBpB,IAAI,EAAG,sCAAqCkB,IAAI,CAACE,KAAM,GAAE;QACzDC,IAAI,EAAE,SAAS;QACfC,gBAAgB,EAAE,IAAI;QACtBC,kBAAkB,EAAE,SAAS;QAC7BC,iBAAiB,EAAE,oBAAoB;QACvCC,iBAAiB,EAAE,MAAM;QACzBC,gBAAgB,EAAE;MACpB,CAAC,EACAC,IAAI,CAAEC,MAAM,IAAK;QAChB,IAAIA,MAAM,CAACC,WAAW,EAAE;UACtB,IAAI,CAACC,cAAc,CAACZ,IAAI;QAC1B;MACF,CAAC,CAAC;IACN,CAAC;IAEDa,OAAO,CAAClB,CAAC,EAAE;MACTJ,OAAO,CAACC,GAAG,CAACG,CAAC,CAAC;MACZ,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAACrB,IAAI,EAAE,iBAAiB;QAAEsC,MAAM,EAAE;UAAEhB,EAAE,EAAEH,CAAC,CAACG;QAAG;MAAC,CAAC,CAAC;IACtE;EACF,CAAC;EACDiB,QAAQ,EAAE;IACR,GAAGxC,QAAQ,CAAC;MACVyC,QAAQ,EAAGC,KAAK,IAAKA,KAAK,CAACD,QAAQ,CAACE;IACtC,CAAC;EACH;AACF,CAAC","names":["PageTitle","TableList","mapActions","mapState","name","components","data","pages","link","campos","text","field","acoes","mounted","fetchProducts","catch","err","Toast","fire","console","log","methods","editar","i","$router","push","id","deletar","item","$swal","title","icon","showCancelButton","confirmButtonColor","confirmButtonText","cancelButtonColor","cancelButtonText","then","result","isConfirmed","deleteProducts","options","params","computed","products","state","listProducts"],"sourceRoot":"","sources":["/var/www/html/vue-projects/kanban-vuejs/src/views/products/ProdutosView.vue"],"sourcesContent":["<template>\n  <PageTitle page=\"Produtos\" :pages=\"pages\" />\n\n  <!-- Table -->\n  <div class=\"row\">\n    <div class=\"col-xl-12\">\n      <TableList\n        title=\"Produtos cadastrados\"\n        :campos=\"campos\"\n        :itens=\"products\"\n        :acoes=\"acoes\"\n        @editar=\"editar($event)\"\n        @deletar=\"deletar($event)\"\n        @options=\"options($event)\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport PageTitle from \"@/components/template/PageTitle\";\nimport TableList from \"@/components/template/TableList\";\nimport { mapActions, mapState } from \"vuex\";\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: \"Produtos\",\n  components: { TableList, PageTitle },\n  data: () => ({\n    pages: [\n      {\n        name: \"Início\",\n        link: \"/\",\n      },\n    ],\n    campos: [\n      { text: \"ID\", field: \"id\" },\n      { text: \"Titulo\", field: \"title\" },\n      { text: \"Descrição\", field: \"description\" },\n      { text: \"Marca\", field: \"brand\" },\n    ],\n    acoes: [\"edit\", \"delete\", \"options\"],\n  }),\n  mounted() {\n    this.fetchProducts().catch((err) => {\n      this.Toast.fire(\"Ocorreu um erro ao listar os produtos.\", \"\", \"error\");\n      console.log(\"error\", err);\n    });\n  },\n  methods: {\n    ...mapActions([\"deleteProducts\", \"fetchProducts\"]),\n\n    editar(i) {\n      this.$router.push(`/produto/${i.id}`);\n    },\n\n    deletar(item) {\n      // Verifica se realmente deve deletar\n      this.$swal\n        .fire({\n          title: \"Deletar Produto\",\n          text: `Deseja realmente deletar o produto ${item.title}?`,\n          icon: \"warning\",\n          showCancelButton: true,\n          confirmButtonColor: \"#3085d6\",\n          confirmButtonText: \"Sim, pode deletar.\",\n          cancelButtonColor: \"#d33\",\n          cancelButtonText: \"Cancelar\",\n        })\n        .then((result) => {\n          if (result.isConfirmed) {\n            this.deleteProducts(item)\n          }\n        });\n    },\n\n    options(i) {\n      console.log(i);\n        this.$router.push({name: 'product_options', params: { id: i.id }});\n    }\n  },\n  computed: {\n    ...mapState({\n      products: (state) => state.products.listProducts,\n    }),\n  },\n};\n</script>\n\n<style scoped>\n</style>"]},"metadata":{},"sourceType":"module"}