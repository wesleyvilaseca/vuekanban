{"ast":null,"code":"import PageTitle from \"@/components/template/PageTitle\";\nimport { mapActions, mapState } from \"vuex\";\nimport FormOptions from \"@/components/options/FormOptions\";\nimport TableList from \"@/components/template/TableList\";\nexport default {\n  name: \"EditOptions\",\n  components: {\n    TableList,\n    FormOptions,\n    PageTitle\n  },\n  data: () => ({\n    pages: [{\n      name: \"Início\",\n      link: \"/\"\n    }, {\n      name: \"Informações\",\n      link: \"/informacoes\"\n    }],\n    id: \"\",\n    campos: [{\n      text: 'ID',\n      field: 'id'\n    }, {\n      text: 'Valor',\n      field: 'name'\n    }],\n    option: {},\n    optionValue: {\n      name: \"\"\n    },\n    valida: 0\n  }),\n  computed: {\n    ...mapState(\"options\", [\"listOptionsValue\"])\n  },\n  methods: {\n    ...mapActions(\"options\", [\"getOptionId\", \"getValueOption\", \"updateOption\", \"deleteValueOption\", \"insertOptionValue\"]),\n    getListValue() {\n      var id = this.id;\n      return this.listOptionsValue.filter(data => data.option_id == id);\n    },\n    alterarOption(obj) {\n      obj.id = this.id;\n      var form = new FormData();\n      form.set(\"title\", obj.title);\n      form.set(\"description\", obj.description);\n      form.set(\"type\", \"unique\");\n      this.updateOption({\n        obj,\n        form\n      });\n    },\n    adicionarValorOption() {\n      this.valida = 1;\n      if (this.optionValue.name === \"\" || this.optionValue.name === null) return false;\n\n      // Repassa o obj para form obj.\n      let form = new FormData();\n      form.set(\"name\", this.optionValue.name);\n      form.set(\"option_id\", this.id);\n      this.insertOptionValue(form);\n      this.valida = 0;\n      this.optionValue.name = \"\";\n      setTimeout(() => {\n        this.buscaValores();\n      }, 500);\n    },\n    deletarValor(obj) {\n      // Verifica se realmente deve deletar\n      this.$swal.fire({\n        title: 'Deletar Valor',\n        text: `Deseja realmente deletar o valor?`,\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Sim, pode deletar.',\n        cancelButtonColor: '#d33',\n        cancelButtonText: 'Cancelar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.deleteValueOption(obj).then(() => {\n            this.buscaValores();\n          });\n        }\n      });\n    }\n  },\n  created() {\n    this.id = this.parametros = this.$route.params.id;\n\n    // Busca o produto\n    setTimeout(() => {\n      this.getOptionId(this.id).then(result => {\n        let item = result[0];\n        this.option = item;\n      });\n    }, 1500);\n  }\n};","map":{"version":3,"mappings":"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","names":["PageTitle","mapActions","mapState","FormOptions","TableList","name","components","data","pages","link","id","campos","text","field","option","optionValue","valida","computed","methods","getListValue","listOptionsValue","filter","option_id","alterarOption","obj","form","FormData","set","title","description","updateOption","adicionarValorOption","insertOptionValue","setTimeout","buscaValores","deletarValor","$swal","fire","icon","showCancelButton","confirmButtonColor","confirmButtonText","cancelButtonColor","cancelButtonText","then","result","isConfirmed","deleteValueOption","created","parametros","$route","params","getOptionId","item"],"sourceRoot":"","sources":["/var/www/html/vue-projects/kanban-vuejs/src/views/options/EditOptions.vue"],"sourcesContent":["<template>\n  <div>\n    <PageTitle page=\"Adicionar informação\" :pages=\"pages\"/>\n\n    <div class=\"row\">\n\n      <!-- Edita as informações -->\n      <div class=\"col-md-3\">\n        <FormOptions\n            title=\"Alterar a informação\"\n            description=\"Preencha os campos a baixo\"\n            :item=\"option\"\n            @processaFormulario=\"alterarOption($event)\"\n        />\n      </div>\n\n      <div class=\"col-md-9\">\n        <!-- Adicionar valores -->\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h4 class=\"mt-0 mb-3 header-title\">Adicione valores</h4>\n\n            <div class=\"form-group\">\n              <label>Valor para a informação</label>\n              <input type=\"text\" class=\"form-control\" placeholder=\"Ex: Branco\" v-model=\"optionValue.name\" />\n              <span v-if=\"valida > 0 && optionValue.name.length === 0\" class=\"valida\">Preecha esse campo.</span>\n            </div>\n\n            <div class=\"form-group mt-4\">\n              <button class=\"btn btn-primary\" @click=\"adicionarValorOption()\">\n                Adicionar\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Lista os valores -->\n        <TableList\n            title=\"Valores cadastrados\"\n            :campos=\"campos\"\n            :itens=\"getListValue()\"\n            :acoes=\"['delete']\"\n            @deletar=\"deletarValor($event)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PageTitle from \"@/components/template/PageTitle\";\nimport {mapActions, mapState} from \"vuex\";\nimport FormOptions from \"@/components/options/FormOptions\";\nimport TableList from \"@/components/template/TableList\";\n\nexport default {\n  name: \"EditOptions\",\n  components: {TableList, FormOptions, PageTitle},\n  data: () => ({\n    pages: [\n      {\n        name: \"Início\",\n        link: \"/\"\n      },\n      {\n        name: \"Informações\",\n        link: \"/informacoes\"\n      }\n    ],\n    id: \"\",\n    campos: [\n      { text: 'ID', field: 'id' },\n      { text: 'Valor', field: 'name' }\n    ],\n    option: {},\n    optionValue: {name: \"\"},\n    valida: 0\n  }),\n  computed: {\n    ...mapState(\"options\", [\"listOptionsValue\"])\n  },\n  methods: {\n    ...mapActions(\"options\", [\"getOptionId\", \"getValueOption\", \"updateOption\", \"deleteValueOption\", \"insertOptionValue\"]),\n\n    getListValue() {\n      var id = this.id;\n      return this.listOptionsValue.filter(data => data.option_id == id)\n    },\n\n    alterarOption(obj){\n      obj.id = this.id\n\n      var form = new FormData();\n      form.set(\"title\", obj.title);\n      form.set(\"description\", obj.description);\n      form.set(\"type\", \"unique\");\n\n      this.updateOption({obj, form})\n    },\n\n    adicionarValorOption() {\n      this.valida = 1;\n\n      if(this.optionValue.name === \"\" || this.optionValue.name === null)\n        return false;\n\n      // Repassa o obj para form obj.\n      let form = new FormData();\n      form.set(\"name\", this.optionValue.name);\n      form.set(\"option_id\", this.id);\n\n      this.insertOptionValue(form)\n      this.valida = 0;\n      this.optionValue.name = \"\"\n\n      setTimeout(() => {\n        this.buscaValores()\n      }, 500)\n    },\n\n    deletarValor(obj) {\n      // Verifica se realmente deve deletar\n      this.$swal.fire({\n        title: 'Deletar Valor',\n        text: `Deseja realmente deletar o valor?`,\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Sim, pode deletar.',\n        cancelButtonColor: '#d33',\n        cancelButtonText: 'Cancelar'\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.deleteValueOption(obj)\n              .then(() => {\n                this.buscaValores()\n              })\n        }\n      })\n    }\n  },\n  created() {\n    this.id = this.parametros = this.$route.params.id\n\n    // Busca o produto\n    setTimeout(() => {\n      this.getOptionId(this.id)\n          .then((result) => {\n            let item = result[0]\n            this.option = item\n          })\n    }, 1500)\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}