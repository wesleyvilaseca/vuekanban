{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"row\"\n};\nconst _hoisted_2 = {\n  class: \"col-xl-12\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PageTitle = _resolveComponent(\"PageTitle\");\n  const _component_TableList = _resolveComponent(\"TableList\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_PageTitle, {\n    page: \"Produtos\",\n    pages: _ctx.pages\n  }, null, 8 /* PROPS */, [\"pages\"]), _createCommentVNode(\" Table \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_TableList, {\n    title: \"Produtos cadastrados\",\n    campos: _ctx.campos,\n    itens: _ctx.products,\n    acoes: _ctx.acoes,\n    onEditar: _cache[0] || (_cache[0] = $event => $options.editar($event)),\n    onDeletar: _cache[1] || (_cache[1] = $event => $options.deletar($event)),\n    onOptions: _cache[2] || (_cache[2] = $event => $options.options($event))\n  }, null, 8 /* PROPS */, [\"campos\", \"itens\", \"acoes\"])])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EAIOA,KAAK,EAAC;AAAK;;EACTA,KAAK,EAAC;AAAW;;;;6DAJxBC,aAA4CC;IAAjCC,IAAI,EAAC,UAAU;IAAEC,KAAK,EAAEC;sCAEnCC,8BAAc,EACdC,oBAYM,OAZNC,UAYM,GAXJD,oBAUM,OAVNE,UAUM,GATJR,aAQES;IAPAC,KAAK,EAAC,sBAAsB;IAC3BC,MAAM,EAAEP,WAAM;IACdQ,KAAK,EAAER,aAAQ;IACfS,KAAK,EAAET,UAAK;IACZU,QAAM,sCAAEC,eAAM,CAACC,MAAM;IACrBC,SAAO,sCAAEF,gBAAO,CAACC,MAAM;IACvBE,SAAO,sCAAEH,gBAAO,CAACC,MAAM","names":["class","_createVNode","_component_PageTitle","page","pages","_ctx","_createCommentVNode","_createElementVNode","_hoisted_1","_hoisted_2","_component_TableList","title","campos","itens","acoes","onEditar","$options","$event","onDeletar","onOptions"],"sourceRoot":"","sources":["/var/www/html/vue-projects/kanban-vuejs/src/views/products/ProdutosView.vue"],"sourcesContent":["<template>\n  <PageTitle page=\"Produtos\" :pages=\"pages\" />\n\n  <!-- Table -->\n  <div class=\"row\">\n    <div class=\"col-xl-12\">\n      <TableList\n        title=\"Produtos cadastrados\"\n        :campos=\"campos\"\n        :itens=\"products\"\n        :acoes=\"acoes\"\n        @editar=\"editar($event)\"\n        @deletar=\"deletar($event)\"\n        @options=\"options($event)\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport PageTitle from \"@/components/template/PageTitle\";\nimport TableList from \"@/components/template/TableList\";\nimport { mapActions, mapState } from \"vuex\";\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: \"Produtos\",\n  components: { TableList, PageTitle },\n  data: () => ({\n    pages: [\n      {\n        name: \"Início\",\n        link: \"/\",\n      },\n    ],\n    campos: [\n      { text: \"ID\", field: \"id\" },\n      { text: \"Titulo\", field: \"title\" },\n      { text: \"Descrição\", field: \"description\" },\n      { text: \"Marca\", field: \"brand\" },\n    ],\n    acoes: [\"edit\", \"delete\", \"options\"],\n  }),\n  mounted() {\n    this.fetchProducts().catch((err) => {\n      this.Toast.fire(\"Ocorreu um erro ao listar os produtos.\", \"\", \"error\");\n      console.log(\"error\", err);\n    });\n  },\n  methods: {\n    ...mapActions([\"deleteProducts\", \"fetchProducts\"]),\n\n    editar(i) {\n      this.$router.push(`/produto/${i.id}`);\n    },\n\n    deletar(item) {\n      // Verifica se realmente deve deletar\n      this.$swal\n        .fire({\n          title: \"Deletar Produto\",\n          text: `Deseja realmente deletar o produto ${item.title}?`,\n          icon: \"warning\",\n          showCancelButton: true,\n          confirmButtonColor: \"#3085d6\",\n          confirmButtonText: \"Sim, pode deletar.\",\n          cancelButtonColor: \"#d33\",\n          cancelButtonText: \"Cancelar\",\n        })\n        .then((result) => {\n          if (result.isConfirmed) {\n            this.deleteProducts(item)\n          }\n        });\n    },\n\n    options(i) {\n      console.log(i);\n        this.$router.push({name: 'product_options', params: { id: i.id }});\n    }\n  },\n  computed: {\n    ...mapState({\n      products: (state) => state.products.listProducts,\n    }),\n  },\n};\n</script>\n\n<style scoped>\n</style>"]},"metadata":{},"sourceType":"module"}