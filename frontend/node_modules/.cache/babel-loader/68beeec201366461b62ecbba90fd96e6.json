{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, h } from 'vue';\nimport { smoothDnD, dropHandlers, constants } from 'smooth-dnd';\nexport * from 'smooth-dnd';\n\n/**\r\n * Checks if object is array\r\n * @param {*} obj \r\n * @returns boolean\r\n */\nconst isArray = function (obj) {\n  return Array.isArray(obj);\n  //return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\n/**\r\n * Checks if tag or tag.value (ref) is string function or object\r\n * @param {*} tag \r\n * @returns boolean\r\n */\nfunction validateTagProp(tag) {\n  if (tag) {\n    if (typeof tag === 'string') return true;\n    if (typeof tag === 'object') {\n      if (typeof tag.value === 'string' || typeof tag.value === 'function' || typeof tag.value === 'object') {\n        return true;\n      }\n    }\n    return false;\n  }\n  return true;\n}\nfunction getTagProps(ctx, tagClasses) {\n  const tag = ctx.$props.tag;\n  if (tag) {\n    if (typeof tag === 'string') {\n      const result = {\n        value: tag\n      };\n      if (tagClasses) {\n        result.props = {\n          class: tagClasses\n        };\n      }\n      return result;\n    } else if (typeof tag === 'object') {\n      const result = {\n        value: tag.value || 'div',\n        props: tag.props || {}\n      };\n      if (tagClasses) {\n        if (result.props.class) {\n          if (isArray(result.props.class)) {\n            result.props.class.push(tagClasses);\n          } else {\n            result.props.class = [tagClasses, result.props.class];\n          }\n        } else {\n          result.props.class = tagClasses;\n        }\n      }\n      return result;\n    }\n  }\n  return {\n    value: 'div'\n  };\n}\nsmoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;\nsmoothDnD.wrapChild = false;\nconst eventEmitterMap = {\n  'drag-start': 'onDragStart',\n  'drag-end': 'onDragEnd',\n  'drop': 'onDrop',\n  'drag-enter': 'onDragEnter',\n  'drag-leave': 'onDragLeave',\n  'drop-ready': 'onDropReady'\n};\nvar Container = defineComponent({\n  name: 'Container',\n  mounted() {\n    // emit events\n    const options = Object.assign({}, this.$props);\n    for (const key in eventEmitterMap) {\n      //console.log(`${key}: ${eventEmitterMap[key]}`);\n      options[eventEmitterMap[key]] = props => {\n        this.$emit(key, props);\n      };\n    }\n    this.containerElement = this.$refs.container || this.$el;\n    this.container = smoothDnD(this.containerElement, options);\n  },\n  unmounted() {\n    if (this.container) {\n      this.container.dispose();\n    }\n  },\n  emits: ['drop', 'drag-start', 'drag-end', 'drag-enter', 'drag-leave', 'drop-ready'],\n  props: {\n    removeOnDropOut: {\n      type: Boolean,\n      default: false\n    },\n    autoScrollEnabled: {\n      type: Boolean,\n      default: true\n    },\n    behaviour: String,\n    groupName: String,\n    orientation: String,\n    dragHandleSelector: String,\n    nonDragAreaSelector: String,\n    lockAxis: String,\n    dragClass: String,\n    dropClass: String,\n    dragBeginDelay: Number,\n    animationDuration: Number,\n    getChildPayload: Function,\n    shouldAnimateDrop: Function,\n    shouldAcceptDrop: Function,\n    getGhostParent: Function,\n    dropPlaceholder: [Object, Boolean],\n    tag: {\n      validator: validateTagProp,\n      default: 'div'\n    }\n  },\n  render() {\n    const tagProps = getTagProps(this);\n    return h(tagProps.value, Object.assign({}, {\n      ref: 'container'\n    }, tagProps.props), this.$slots.default());\n  }\n});\nvar Draggable = defineComponent({\n  name: 'Draggable',\n  props: {\n    tag: {\n      validator: validateTagProp,\n      default: 'div'\n    }\n  },\n  render: function () {\n    //wrap child\n    const tagProps = getTagProps(this, constants.wrapperClass);\n    return h(tagProps.value, Object.assign({}, tagProps.props), this.$slots.default());\n  }\n});\nexport { Container, Draggable };","map":{"version":3,"mappings":"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","names":["isArray","obj","Array","validateTagProp","tag","value","getTagProps","ctx","tagClasses","$props","result","props","class","push","smoothDnD","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","eventEmitterMap","defineComponent","name","mounted","options","Object","assign","key","$emit","containerElement","$refs","container","$el","unmounted","dispose","emits","removeOnDropOut","type","Boolean","default","autoScrollEnabled","behaviour","String","groupName","orientation","dragHandleSelector","nonDragAreaSelector","lockAxis","dragClass","dropClass","dragBeginDelay","Number","animationDuration","getChildPayload","Function","shouldAnimateDrop","shouldAcceptDrop","getGhostParent","dropPlaceholder","validator","render","tagProps","h","ref","$slots","constants","wrapperClass"],"sources":["../src/utils/utils.js","../src/components/Container.js","../src/components/Draggable.js"],"sourcesContent":["\r\n/**\r\n * Checks if object is array\r\n * @param {*} obj \r\n * @returns boolean\r\n */\r\nconst isArray = function (obj) {\r\n  return Array.isArray(obj);\r\n  //return Object.prototype.toString.call(obj) === '[object Array]';\r\n};\r\n\r\n/**\r\n * Checks if tag or tag.value (ref) is string function or object\r\n * @param {*} tag \r\n * @returns boolean\r\n */\r\nexport function validateTagProp (tag) {\r\n  if (tag) {\r\n    if (typeof tag === 'string') return true;\r\n    if (typeof tag === 'object') {\r\n      if (\r\n        typeof tag.value === 'string' ||\r\n        typeof tag.value === 'function' ||\r\n        typeof tag.value === 'object'\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getTagProps (ctx, tagClasses) {\r\n  const tag = ctx.$props.tag;\r\n  if (tag) {\r\n    if (typeof tag === 'string') {\r\n      const result = { value: tag };\r\n      if (tagClasses) {\r\n        result.props = { class: tagClasses };\r\n      }\r\n      return result;\r\n    } else if (typeof tag === 'object') {\r\n      const result = { value: tag.value || 'div', props: tag.props || {} };\r\n      if (tagClasses) {\r\n        if (result.props.class) {\r\n          if (isArray(result.props.class)) {\r\n            result.props.class.push(tagClasses);\r\n          } else {\r\n            result.props.class = [tagClasses, result.props.class];\r\n          }\r\n        } else {\r\n          result.props.class = tagClasses;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n  return { value: 'div' };\r\n}","import { defineComponent, h } from 'vue';\r\nimport { smoothDnD, dropHandlers } from 'smooth-dnd';\r\nimport { getTagProps, validateTagProp } from '../utils/utils';\r\n\r\nsmoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;\r\nsmoothDnD.wrapChild = false;\r\n\r\nconst eventEmitterMap = {\r\n  'drag-start': 'onDragStart',\r\n  'drag-end': 'onDragEnd',\r\n  'drop': 'onDrop',\r\n  'drag-enter': 'onDragEnter',\r\n  'drag-leave': 'onDragLeave',\r\n  'drop-ready': 'onDropReady'\r\n};\r\n\r\nexport default defineComponent({\r\n  name: 'Container',\r\n  mounted () {\r\n    // emit events\r\n    const options = Object.assign({}, this.$props);\r\n    for (const key in eventEmitterMap) {\r\n      //console.log(`${key}: ${eventEmitterMap[key]}`);\r\n      options[eventEmitterMap[key]] = (props) => {\r\n        this.$emit(key, props);\r\n      }\r\n    }\r\n\r\n    this.containerElement = this.$refs.container || this.$el;\r\n    this.container = smoothDnD(this.containerElement, options);\r\n  },\r\n  unmounted () {\r\n    if (this.container) {\r\n      this.container.dispose();\r\n    }\r\n  },\r\n  emits: ['drop', 'drag-start', 'drag-end', 'drag-enter', 'drag-leave', 'drop-ready' ],\r\n  props: {\r\n    removeOnDropOut: { type: Boolean, default: false },\r\n    autoScrollEnabled: { type: Boolean, default: true },\r\n    behaviour: String,\r\n    groupName: String,\r\n    orientation: String,\r\n    dragHandleSelector: String,\r\n    nonDragAreaSelector: String,\r\n    lockAxis: String,\r\n    dragClass: String,\r\n    dropClass: String,\r\n    dragBeginDelay: Number,\r\n    animationDuration: Number,\r\n    getChildPayload: Function,\r\n    shouldAnimateDrop: Function,\r\n    shouldAcceptDrop: Function,\r\n    getGhostParent: Function,\r\n    dropPlaceholder: [Object, Boolean],\r\n    tag: {\r\n      validator: validateTagProp,\r\n      default: 'div',\r\n    }\r\n  },\r\n  render(){\r\n    const tagProps = getTagProps(this);\r\n    return h(\r\n      tagProps.value,\r\n      Object.assign({}, { ref: 'container' }, tagProps.props),\r\n      this.$slots.default(),\r\n    );\r\n  }\r\n});\r\n","import { defineComponent, h } from 'vue';\r\nimport { constants } from 'smooth-dnd';\r\nimport { getTagProps, validateTagProp } from '../utils/utils';\r\n\r\nexport default defineComponent({\r\n  name: 'Draggable',\r\n  props: {\r\n    tag: {\r\n      validator: validateTagProp,\r\n      default: 'div'\r\n    },\r\n  },\r\n  render: function () {\r\n    //wrap child\r\n    const tagProps = getTagProps(this, constants.wrapperClass);\r\n    return h(\r\n      tagProps.value,\r\n      Object.assign({}, tagProps.props),\r\n      this.$slots.default()\r\n    );\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}